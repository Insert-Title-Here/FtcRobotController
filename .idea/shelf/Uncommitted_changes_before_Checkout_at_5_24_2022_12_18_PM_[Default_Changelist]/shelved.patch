Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/MecanumCode/Common/CapstoneArm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.MecanumCode.Common;\r\n\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.robotcore.hardware.HardwareMap;\r\nimport com.qualcomm.robotcore.hardware.Servo;\r\n\r\npublic class CapstoneArm {\r\n\r\n    DcMotor capExtension;\r\n    Servo grabber;\r\n\r\n    boolean isGrabbing = false;\r\n\r\n    public static final double CAP_SERVO_OPEN = 0.85;\r\n    public static final double CAP_SERVO_CLOSED = 1;\r\n\r\n    public CapstoneArm(HardwareMap hardwareMap) {\r\n        capExtension = hardwareMap.get(DcMotor.class, \"CapExtension\");\r\n        capExtension.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        capExtension.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\r\n        capExtension.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\r\n\r\n        grabber = hardwareMap.get(Servo.class, \"CapstoneGrabber\");\r\n        goToPosition(0);\r\n        grabber.setPosition(0.85);\r\n\r\n    }\r\n\r\n    public void setPower(double power) {\r\n        capExtension.setPower(power);\r\n    }\r\n\r\n    public void goToPosition(int armPosition) {\r\n        capExtension.setTargetPosition(armPosition);\r\n        capExtension.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        /*\r\n        if(armPosition == 0) {\r\n            capExtension.setPower(0.3);\r\n        } else {\r\n            capExtension.setPower(0.8);\r\n        }\r\n\r\n         */\r\n        capExtension.setPower(1);\r\n        while (Math.abs(getTelemetry()[0] - armPosition) > 20) {\r\n\r\n        }\r\n        capExtension.setPower(0);\r\n        capExtension.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\r\n    }\r\n\r\n    public void setGrabberPosition(double position) {\r\n        grabber.setPosition(position);\r\n        if (position == CAP_SERVO_OPEN) {\r\n            isGrabbing = false;\r\n        } else if (position == CAP_SERVO_CLOSED) {\r\n            isGrabbing = true;\r\n        }\r\n    }\r\n\r\n    public synchronized void toggleGrab() {\r\n        if(isGrabbing) {\r\n            setGrabberPosition(CAP_SERVO_OPEN);\r\n            isGrabbing = false;\r\n        } else {\r\n            setGrabberPosition(CAP_SERVO_CLOSED);\r\n            isGrabbing = true;\r\n        }\r\n    }\r\n\r\n    public double[] getTelemetry() {\r\n        return new double[] {capExtension.getCurrentPosition(), grabber.getPosition()};\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/MecanumCode/Common/CapstoneArm.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/MecanumCode/Common/CapstoneArm.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/MecanumCode/Common/CapstoneArm.java	
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/MecanumCode/Common/CapstoneArm.java	
@@ -41,7 +41,7 @@
         }
 
          */
-        capExtension.setPower(1);
+        capExtension.setPower(0.7);
         while (Math.abs(getTelemetry()[0] - armPosition) > 20) {
 
         }
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/MecanumCode/Auto/WarehouseFreightRed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.MecanumCode.Auto;\r\n\r\nimport com.qualcomm.hardware.bosch.BNO055IMU;\r\nimport com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\n\r\nimport org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;\r\nimport org.firstinspires.ftc.robotcore.external.navigation.Acceleration;\r\nimport org.firstinspires.ftc.robotcore.external.navigation.Orientation;\r\nimport org.firstinspires.ftc.teamcode.MecanumCode.Auto.Vision.BarcodePipelineRed;\r\nimport org.firstinspires.ftc.teamcode.MecanumCode.Auto.Vision.BarcodePipelineWarehouseRed;\r\nimport org.firstinspires.ftc.teamcode.MecanumCode.Common.CapstoneArm;\r\nimport org.firstinspires.ftc.teamcode.MecanumCode.Common.Carousel;\r\nimport org.firstinspires.ftc.teamcode.MecanumCode.Common.Constants;\r\nimport org.firstinspires.ftc.teamcode.MecanumCode.Common.MagneticArm;\r\nimport org.firstinspires.ftc.teamcode.MecanumCode.Common.MecanumDriveTrain;\r\nimport org.firstinspires.ftc.teamcode.MecanumCode.Common.OpModeWrapper;\r\nimport org.openftc.easyopencv.OpenCvCamera;\r\nimport org.openftc.easyopencv.OpenCvCameraFactory;\r\nimport org.openftc.easyopencv.OpenCvCameraRotation;\r\n\r\nimport java.io.FileNotFoundException;\r\n\r\n\r\n@Autonomous(name=\"WarehouseFreight Red Confirmation\")\r\npublic class WarehouseFreightRed extends OpModeWrapper {\r\n\r\n    MecanumDriveTrain drive;\r\n    Carousel carousel;\r\n    CapstoneArm capArm;\r\n    MagneticArm magArm;\r\n    // The IMU sensor object\r\n    BNO055IMU imu;\r\n\r\n    // State used for updating telemetry\r\n    Orientation angles;\r\n    Acceleration gravity;\r\n\r\n    WebcamName wc;\r\n    OpenCvCamera camera;\r\n\r\n    //static final BarcodePipeline.AutoSide side = BarcodePipeline.AutoSide.RED;\r\n\r\n    //Thread armMovementThread;\r\n    private volatile boolean moveArm;\r\n    Thread armMovementThread;\r\n\r\n\r\n    // global obj\r\n    BarcodePipelineWarehouseRed.BarcodePosition capstonePos;\r\n    static final BarcodePipelineWarehouseRed bPipeline = new BarcodePipelineWarehouseRed();\r\n\r\n    @Override\r\n    protected void onInitialize() throws FileNotFoundException {\r\n        drive = new MecanumDriveTrain(hardwareMap);\r\n        carousel = new Carousel(hardwareMap);\r\n        capArm = new CapstoneArm(hardwareMap);\r\n        magArm = new MagneticArm(hardwareMap);\r\n\r\n        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(\"cameraMonitorViewId\", \"id\", hardwareMap.appContext.getPackageName());\r\n        wc = hardwareMap.get(WebcamName.class, \"Webcam\");\r\n\r\n        // W/ or W/ out live preview\r\n        camera = OpenCvCameraFactory.getInstance().createWebcam(wc, cameraMonitorViewId);\r\n        // camera = OpenCvCameraFactory.getInstance().createWebcam(wc);\r\n\r\n        camera.setPipeline(bPipeline);\r\n\r\n        // Open an asynchronous connection to the device\r\n        camera.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener() {\r\n\r\n            // Start opening the camera and stream it\r\n            @Override\r\n            public void onOpened() {\r\n\r\n                /*\r\n                // create a rgb2gray mat pipeline\r\n                class GrayPipeline extends OpenCvPipeline {\r\n                    Mat gray = new Mat();\r\n                    @Override\r\n                    public Mat processFrame(Mat input) {\r\n                        // mat src, mat dst, int code, convert rgb img to gray\r\n                        Imgproc.cvtColor(input, gray, Imgproc.COLOR_RGB2GRAY);\r\n                        return gray;\r\n                    }\r\n                } */\r\n\r\n                camera.startStreaming(320, 240, OpenCvCameraRotation.UPRIGHT);\r\n\r\n\r\n            }\r\n\r\n            // Method will be called if the camera cannot be opened\r\n            @Override\r\n            public void onError(int errorCode) {\r\n                telemetry.addData(\"Camera Init Error\", errorCode);\r\n            }\r\n        });\r\n\r\n\r\n        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();\r\n        parameters.angleUnit           = BNO055IMU.AngleUnit.RADIANS;\r\n        parameters.accelUnit           = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;\r\n        parameters.calibrationDataFile = \"BNO055IMUCalibration.json\"; // see the calibration sample opmode\r\n        parameters.loggingEnabled      = true;\r\n        parameters.loggingTag          = \"IMU\";\r\n        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();\r\n\r\n        // Retrieve and initialize the IMU. We expect the IMU to be attached to an I2C port\r\n        // on a Core Device Interface Module, configured to be a sensor of type \"AdaFruit IMU\",\r\n        // and named \"imu\".\r\n        imu = hardwareMap.get(BNO055IMU.class, \"imu\");\r\n        imu.initialize(parameters);\r\n        moveArm = false;\r\n        /*armMovementThread = new Thread(){\r\n            @Override\r\n            public void run(){\r\n                while(!moveArm);\r\n\r\n\r\n            }\r\n        };\r\n\r\n\r\n         */\r\n\r\n        while(!opModeIsActive()){\r\n            telemetry.addData(\"pos\", bPipeline.getPos());\r\n            telemetry.update();\r\n        }\r\n\r\n        moveArm = false;\r\n        armMovementThread = new Thread(){\r\n            @Override\r\n            public void run(){\r\n                while(!moveArm);\r\n                capArm.goToPosition(0);\r\n            }\r\n        };\r\n\r\n\r\n        //capArm.setGrabberPosition(0.85);\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        armMovementThread.start();\r\n        capstonePos = bPipeline.getPos();\r\n        //sleep(15000);\r\n        /*drive.driveAuto(120, 240, MecanumDriveTrain.MovementType.STRAIGHT);\r\n        drive.driveAuto(120, 240, MecanumDriveTrain.MovementType.STRAFE);\r\n        drive.driveAuto(120, 240, MecanumDriveTrain.MovementType.ROTATE);\r\n\r\n         */\r\n        // Forward: 1 ft 540.3 tics (5403 for 10 ft)\r\n        // Rotation: 360 degrees 3665 tics\r\n        // Strafe: 590 tics/ft - = Left, + = Right\r\n        //drive.driveAuto(0.3, -800, MecanumDriveTrain.MovementType.STRAIGHT);\r\n        drive.driveAuto(0.4, -600, MecanumDriveTrain.MovementType.RDIAGONAL);\r\n        sleep(500);\r\n        drive.driveAuto(0.4, -900, MecanumDriveTrain.MovementType.ROTATE);\r\n        drive.driveAuto(0.4, -100, MecanumDriveTrain.MovementType.STRAIGHT);\r\n        //drive.driveAuto(0.3, -1000, MecanumDriveTrain.MovementType.STRAFE);\r\n        drive.driveAuto(0.3, -1650, MecanumDriveTrain.MovementType.STRAFE);\r\n        drive.driveAuto(0.4, 100, MecanumDriveTrain.MovementType.STRAIGHT);\r\n\r\n        /*while(opModeIsActive()){\r\n            telemetry.addData(\"Straight\", \"yes\");\r\n            telemetry.update();\r\n        }\r\n\r\n         */\r\n        //drive.driveAuto(0.3, -250, MecanumDriveTrain.MovementType.ROTATE);\r\n        //drive.driveAuto(0.2, -50, MecanumDriveTrain.MovementType.STRAIGHT);\r\n        //drive.setPower(-0.1, -0.1, -0.1, -0.1);\r\n\r\n        //capArm.setGrabberPosition(0.85);\r\n\r\n        sleep(500);\r\n\r\n        //capstonePos = BarcodePipelineWarehouseRed.BarcodePosition.CENTER;\r\n\r\n        if (capstonePos == BarcodePipelineWarehouseRed.BarcodePosition.RIGHT) {\r\n            //drive.driveAuto(0.3, -520, MecanumDriveTrain.MovementType.STRAIGHT);\r\n            //capArm.goToPosition(300);\r\n            //drive.driveAuto(0.3, -160, MecanumDriveTrain.MovementType.STRAIGHT);\r\n            capArm.goToPosition(Constants.TOP_GOAL_POS);\r\n            drive.driveAuto(0.3, -40, MecanumDriveTrain.MovementType.STRAIGHT);\r\n\r\n            capArm.toggleGrab();\r\n\r\n            sleep(500);\r\n            capArm.toggleGrab();\r\n\r\n            drive.driveAuto(0.3, 100, MecanumDriveTrain.MovementType.STRAIGHT);\r\n            moveArm = true;\r\n            sleep(500);\r\n            drive.driveAuto(0.3, -80, MecanumDriveTrain.MovementType.STRAIGHT);\r\n\r\n        } else if (capstonePos == BarcodePipelineWarehouseRed.BarcodePosition.CENTER) {\r\n            //drive.driveAuto(0.3, -180, MecanumDriveTrain.MovementType.STRAIGHT);\r\n            capArm.goToPosition(Constants.MID_GOAL_POS);\r\n            drive.driveAuto(0.3, -50, MecanumDriveTrain.MovementType.STRAIGHT);\r\n\r\n            capArm.toggleGrab();\r\n            sleep(500);\r\n            capArm.toggleGrab();\r\n\r\n            drive.driveAuto(0.3, 100, MecanumDriveTrain.MovementType.STRAIGHT);\r\n            moveArm = true;\r\n            sleep(500);\r\n            drive.driveAuto(0.3, -20, MecanumDriveTrain.MovementType.STRAIGHT);\r\n\r\n\r\n        } else {\r\n            drive.driveAuto(0.3, -50, MecanumDriveTrain.MovementType.STRAIGHT);\r\n            capArm.goToPosition(Constants.BOTTOM_GOAL_POS);\r\n            capArm.toggleGrab();\r\n            sleep(500);\r\n            capArm.toggleGrab();\r\n\r\n            drive.driveAuto(0.3, 50, MecanumDriveTrain.MovementType.STRAIGHT);\r\n            //drive.driveAuto(0.3, -100, MecanumDriveTrain.MovementType.STRAFE);\r\n\r\n\r\n            //drive.driveAuto(0.3, 40, MecanumDriveTrain.MovementType.STRAIGHT);\r\n            moveArm = true;\r\n        }\r\n\r\n\r\n        //drive.driveAuto(0.4,50, MecanumDriveTrain.MovementType.STRAIGHT);\r\n\r\n        //capArm.goToPosition(0);\r\n\r\n        //drive.driveAuto(0.4, -220, MecanumDriveTrain.MovementType.STRAIGHT);\r\n\r\n        drive.driveAuto(0.3, 1970, MecanumDriveTrain.MovementType.STRAFE);\r\n        drive.driveAuto(0.3, 200, MecanumDriveTrain.MovementType.ROTATE);\r\n\r\n        drive.driveAuto(0.4, 1550, MecanumDriveTrain.MovementType.STRAIGHT);\r\n        drive.driveAuto(0.3, -1450, MecanumDriveTrain.MovementType.STRAFE);\r\n        //drive.driveAuto(0.3, 1000, MecanumDriveTrain.MovementType.STRAIGHT);\r\n\r\n        //Freight Pickup\r\n        magArm.setMagnetPosition(MagneticArm.magnetState.GRABBING);\r\n        drive.tankRotate(Math.PI/4, 0.4);\r\n        magArm.setArmPosition(Constants.MAGARM_FREIGHT);\r\n        drive.driveAuto(0.3, 700, MecanumDriveTrain.MovementType.STRAIGHT);\r\n        magArm.setLevelPosition(0.215);\r\n        sleep(2000);\r\n\r\n\r\n        drive.tankRotate(0, 0.3);\r\n        sleep(500);\r\n        drive.tankRotate(Math.PI/2, 0.3);\r\n\r\n        sleep(1000);\r\n\r\n        magArm.setLevelPosition(Constants.LEVEL_HALF_POS);\r\n        sleep(1000);\r\n        drive.driveAuto(0.3, -500, MecanumDriveTrain.MovementType.STRAIGHT);\r\n        drive.tankRotate(Math.PI, 0.3);\r\n        magArm.setLevelPosition(Constants.LEVEL_DOWN_POS);\r\n        sleep(1000);\r\n\r\n        /*magArm.setLevelPosition(Constants.LEVEL_UP_POS);\r\n        sleep(1000);\r\n        drive.driveAuto(0.3, -200, MecanumDriveTrain.MovementType.STRAIGHT);\r\n        drive.tankRotate(3*Math.PI/4, 0.3);\r\n\r\n         */\r\n        //drive.driveAuto(0.3, -150, MecanumDriveTrain.MovementType.STRAIGHT);\r\n        //magArm.setArmPosition(Constants.MAGARM_EXTENDED);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onStop() {\r\n\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/MecanumCode/Auto/WarehouseFreightRed.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/MecanumCode/Auto/WarehouseFreightRed.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/MecanumCode/Auto/WarehouseFreightRed.java	
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/MecanumCode/Auto/WarehouseFreightRed.java	
@@ -202,7 +202,7 @@
         } else if (capstonePos == BarcodePipelineWarehouseRed.BarcodePosition.CENTER) {
             //drive.driveAuto(0.3, -180, MecanumDriveTrain.MovementType.STRAIGHT);
             capArm.goToPosition(Constants.MID_GOAL_POS);
-            drive.driveAuto(0.3, -50, MecanumDriveTrain.MovementType.STRAIGHT);
+            drive.driveAuto(0.3, -80, MecanumDriveTrain.MovementType.STRAIGHT);
 
             capArm.toggleGrab();
             sleep(500);
